name: üöÄ Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: üè∑Ô∏è Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
    steps:
      # Required so that a release triggers follow up workflows
      - name: üîë Generate Token
        id: generate-token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ secrets.CI_BOT_ID }}
          application_private_key: ${{ secrets.CI_BOT_KEY }}

      - name: üì¶ Create Release
        uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ steps.generate-token.outputs.token }}

      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      - name: üè∑Ô∏è Tag Major and Minor Versions
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git remote add gh-token "https://${{ secrets.GITHUB_TOKEN }}@github.com/googleapis/release-please-action.git"

          # Get all components that had releases
          PATHS_RELEASED='${{ steps.release.outputs.paths_released }}'

          # Process each released component
          echo "$PATHS_RELEASED" | jq -r '.[]' | while read -r COMPONENT_PATH; do
            # Skip if path is empty
            [ -z "$COMPONENT_PATH" ] && continue

            # Get component-specific outputs
            if [ "$COMPONENT_PATH" = "." ]; then
              # Root component
              TAG_NAME="${{ steps.release.outputs.tag_name }}"
              MAJOR="${{ steps.release.outputs.major }}"
              MINOR="${{ steps.release.outputs.minor }}"
            else
              # Path component
              TAG_NAME="${{ steps.release.outputs[format('{0}--tag_name', COMPONENT_PATH)] }}"
              MAJOR="${{ steps.release.outputs[format('{0}--major', COMPONENT_PATH)] }}"
              MINOR="${{ steps.release.outputs[format('{0}--minor', COMPONENT_PATH)] }}"
            fi

            # Extract component name from tag
            COMPONENT=$(echo $TAG_NAME | cut -d'-' -f1)

            # Delete existing tags if they exist
            git tag -d ${COMPONENT}-v${MAJOR} || true
            git tag -d ${COMPONENT}-v${MAJOR}.${MINOR} || true
            git push origin :${COMPONENT}-v${MAJOR} || true
            git push origin :${COMPONENT}-v${MAJOR}.${MINOR} || true

            # Create new tags
            git tag -a ${COMPONENT}-v${MAJOR} -m "Release ${COMPONENT}-v${MAJOR}"
            git tag -a ${COMPONENT}-v${MAJOR}.${MINOR} -m "Release ${COMPONENT}-v${MAJOR}.${MINOR}"

            # Push new tags
            git push origin ${COMPONENT}-v${MAJOR}
            git push origin ${COMPONENT}-v${MAJOR}.${MINOR}
          done
